


const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const fs = require("fs");
// Aseg√∫rate de que tu archivo de login ('auto_log_in.js') est√© en la misma carpeta.
// Usaremos la versi√≥n corregida de auto_log_in.js que espera correctamente
const { attemptGoogleLogin } = require("./auto_log_in.js"); // Devuelve { browser, context, page }

const stealth = StealthPlugin();
puppeteer.use(stealth);

// --- Constantes del Notebook ---
const COLAB_NOTEBOOK_URL =
  "https://colab.research.google.com/drive/14DoEu8zTb-CYiZYbWmzowDy-uhnspvtu?usp=sharing";
// const NOTEBOOK_ID = "14DoEu8zTb-CYiZYbWmzowDy-uhnspvtu"; // No usado

// --- Funciones Auxiliares ---
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

// --- Flujo Principal ---
async function enableGpuAndRun() {
  console.log("üöÄ Iniciando GPU en Google Colab...");
  let browser, context, page;

  try {
      ({ browser, context, page } = await attemptGoogleLogin());
      if (!page || page.isClosed() || !page.url().includes("drive.google.com")) {
          throw new Error("Login process failed to land on Google Drive.");
      }
      console.log(`[Main] Confirmada p√°gina en Google Drive: ${page.url()}`);
  } catch (loginError) {
      console.error(`üî• Fatal error during login process: ${loginError.message}`);
      if (browser) await browser.close().catch(e => console.error("Error closing browser on login failure:", e));
      throw loginError;
  }

  // Navegar a Colab
  // En la secci√≥n "Navegar a Colab"
// En la secci√≥n "Navegar a Colab"
try {
  console.log(`üåç Navegando al notebook: ${COLAB_NOTEBOOK_URL}`);
  
  // --- L√çNEA CORREGIDA ---
  // 'domcontentloaded' es demasiado r√°pido (nos "adelantamos").
  // Usamos 'load', que espera a que los scripts y recursos iniciales carguen.
  await page.goto(COLAB_NOTEBOOK_URL, { waitUntil: "load", timeout: 180000 });
  // -------------------------

  // A√±adimos un log para saber que el 'goto' termin√≥ y ahora esperamos la UI
  console.log("‚úÖ Navegaci√≥n (goto) completada. Esperando la UI del editor...");

  // Esperar a que la estructura principal de Colab est√© lista
  // (Esta parte ya estaba bien)
  console.log("‚è≥ Esperando a que el editor de Colab y las celdas carguen...");
  const firstCell = page.locator('.cell.code').first();
  await firstCell.waitFor({ state: 'visible', timeout: 120000 });
  console.log("‚úÖ Notebook editor visible.");

} catch (colabNavError) {
   console.error(`‚ùå Fall√≥ la navegaci√≥n o carga del notebook Colab: ${colabNavError.message}`);
   // Tomar un volcado del DOM puede ser √∫til aqu√≠
   // const html = await page.content();
   // fs.writeFileSync('error_colab_dom.html', html);
   // console.log("... DOM guardado en error_colab_dom.html");
   throw colabNavError;
}

// --- ¬°NUEVO PASO: LIMPIEZA INICIAL DE SALIDAS! (M√âTODO ROBUSTO CORREGIDO) ---
try {
  console.log("üßπ Limpiando todas las salidas usando el men√∫ principal...");
  
  // --- Bloque de popups (se mantiene igual) ---
  try {
      console.log("...Buscando popups de advertencia/bienvenida...");
      const warningButton = page.locator('colab-dialog button:has-text("Run anyway")').first();
      if (await warningButton.isVisible({ timeout: 3000 })) {
          await warningButton.click();
          console.log("...Popup 'Run anyway' cerrado.");
          await sleep(1000);
      }
      const welcomeClose = page.locator('colab-dialog[class*="welcome-dialog"] #close-icon').first();
      if (await welcomeClose.isVisible({ timeout: 1000 })) {
          await welcomeClose.click();
          console.log("...Popup 'Welcome' cerrado.");
          await sleep(500);
      }
  } catch (e) {
      console.log("...No se encontraron popups (o ya estaban cerrados).");
  }
  // --- Fin del bloque de popups ---

  // 1. Hacemos clic en el bot√≥n del men√∫ "Edit" de la barra principal.
  await page.locator('#edit-menu-button').click();

  // 2. Esperamos a que el men√∫ desplegable aparezca.
  await page.locator('#edit-menu .goog-menuitem').first().waitFor({ state: 'visible', timeout: 5000 });
  
  // 3. Hacemos clic en la opci√≥n "Clear all outputs".
  const clearAllButton = page.locator('.goog-menuitem:has-text("Clear all outputs")').first();
  await clearAllButton.click();

  // 4. (Opcional pero recomendado) Esperamos a que el men√∫ se cierre para asegurar que el clic se proces√≥.
  await page.locator('#edit-menu').waitFor({ state: 'hidden', timeout: 5000 });
  
  console.log("‚úÖ Todas las salidas han sido limpiadas.");
  await sleep(500); // Peque√±a pausa para que la UI se actualice.

} catch (clearErr) {
    // Este error no es cr√≠tico. Si falla, es probable que no hubiera salidas que limpiar.
    console.warn(`‚ö†Ô∏è No se pudo limpiar las salidas usando el men√∫ principal. Esto puede ser normal. Mensaje: ${clearErr.message}`);
}
// --- FIN DE LIMPIEZA INICIAL ---


  const mod = process.platform === "darwin" ? "Meta" : "Control";

  // --- PASO 1: Ejecutar la primera celda (para activar entorno) ---
  // (Esta parte no necesita cambios significativos, usaremos localizador)
  try {
      console.log("1Ô∏è‚É£ Ejecutando la primera celda (activaci√≥n)...");
      const firstCellRunButton = page.locator('.cell.code >> nth=0 >> colab-run-button').first();
      await firstCellRunButton.waitFor({ state: 'visible', timeout: 15000 });
      await firstCellRunButton.click();
      console.log("‚úÖ Celda 1 ejecuci√≥n iniciada.");
  } catch(e) {
       console.error(`‚ùå Fall√≥ al iniciar la ejecuci√≥n de la primera celda: ${e.message}`);
       throw e;
  }

  // Esperar conexi√≥n estable
  // (Esta parte no necesita cambios)
    // (Esta parte no necesita cambios)
    
  // --- PASO 2: Desconectar y eliminar el entorno ---
  // (Esta parte no necesita cambios, ya usa localizadores)
  try {
    console.log("üîå Reiniciando entorno de ejecuci√≥n...");

    // Abrir men√∫
    const dropdownSelector = '[aria-label*="Additional connection options"]';
    await page.waitForSelector(dropdownSelector, { timeout: 15000 });
    await page.click(dropdownSelector);
    console.log("‚úÖ Men√∫ desplegable abierto.");

    // Esperar men√∫ visible
    await page.waitForSelector('.goog-menu.goog-menu-vertical', { visible: true, timeout: 5000 });

    // Clic en 'Disconnect...'
    console.log("‚å®Ô∏è Buscando opci√≥n 'Disconnect and delete runtime'...");
    const clickedMenuItem = await page.evaluate(() => {
      const items = Array.from(document.querySelectorAll(".goog-menuitem, .goog-menuitem-content"));
      const targetItem = items.find(item =>
        (item.textContent || "").toLowerCase().includes("disconnect and delete runtime")
      );
      if (!targetItem) return false;
      targetItem.dispatchEvent(new MouseEvent("mousedown", { bubbles: true }));
      targetItem.dispatchEvent(new MouseEvent("mouseup",   { bubbles: true }));
      targetItem.click();
      return true;
    });

    if (!clickedMenuItem) {
      throw new Error("‚ùå No se pudo encontrar 'Disconnect and delete runtime' en el men√∫.");
    }
    console.log("‚úÖ Opci√≥n 'Disconnect and delete runtime' pulsada.");

    // --- MANEJO DEL DI√ÅLOGO DE CONFIRMACI√ìN (SIN ESPERA EXPL√çCITA) ---
    console.log("‚è≥ Intentando confirmar el di√°logo 'Yes/No' inmediatamente...");
    // Selectores para usar DENTRO de evaluate:
    const dialogSelectorForEval = 'mwc-dialog.yes-no-dialog[open]'; // Para buscar DENTRO del evaluate
    const yesButtonContainerSelector = 'md-text-button[slot="primaryAction"][dialogaction="ok"]';
    const touchSpanSelector = 'span.touch';

    let yesClicked = false;
    try {
        // Pausa muy breve por si el di√°logo tarda unas d√©cimas de segundo en a√±adirse al DOM
        await sleep(500);

        console.log("üñ±Ô∏è Intentando click en 'Yes' (priorizando span.touch) usando page.evaluate...");
        yesClicked = await page.evaluate((dialogSel, yesBtnContainerSel, touchSel) => {
            const dialogElement = document.querySelector(dialogSel);
            // Si el di√°logo NO existe en este punto, page.evaluate simplemente devolver√° false
            if (!dialogElement) {
                console.log("... Di√°logo no encontrado en el DOM al intentar click.");
                return false;
            }

            let clickTarget = null;
            const yesButtonContainer = dialogElement.querySelector(yesBtnContainerSel) ||
                                      (dialogElement.shadowRoot ? dialogElement.shadowRoot.querySelector(yesBtnContainerSel) : null);

            if (yesButtonContainer) {
            clickTarget = yesButtonContainer.querySelector(touchSel) || yesButtonContainer; // Intenta span, si no, el bot√≥n
            }

            if (clickTarget && typeof clickTarget.click === 'function') {
            clickTarget.click();
            return true;
            }
            console.warn("Bot√≥n 'Yes' o span.touch no encontrados dentro del di√°logo existente.");
            return false;
        }, dialogSelectorForEval, yesButtonContainerSelector, touchSpanSelector);

        if (yesClicked) {
          console.log("‚è≥ 'Yes' pulsado. Esperando posible di√°logo 'OK' (1.5s)...");
          // Espera a que el di√°logo "Yes" se cierre y aparezca el "OK"
          await sleep(1500); 
  
          try {
              // La estrategia m√°s simple y gen√©rica para un di√°logo "OK"
              // es presionar 'Enter', ya que no tenemos selectores espec√≠ficos para √©l.
              // Si el di√°logo "OK" tambi√©n fuera complejo, necesitar√≠amos
              // replicar la l√≥gica de 'page.evaluate' con nuevos selectores.
              console.log("üñ±Ô∏è Intentando pulsar 'OK' (M√©todo: Presionar 'Enter')...");
              await page.keyboard.press('Enter');
              console.log("üëç 'OK' pulsado (M√©todo: Presionar 'Enter').");
  
          } catch (okError) {
              console.error("‚ùå Fall√≥ al presionar 'Enter' para el di√°logo 'OK'.", okError.message);
              // No relanzamos el error; el "Yes" fue lo importante y ya se gestion√≥.
          }
        } else {
            // Fallback si evaluate no funcion√≥ (p.ej., di√°logo no estaba a√∫n o bot√≥n no encontrado)
            console.warn("‚ö†Ô∏è No se pudo hacer clic con page.evaluate (di√°logo/bot√≥n no listo?). Intentando 'Enter'...");
            await page.keyboard.press('Enter');
            console.log("üëç 'Yes' pulsado (M√©todo: Presionar 'Enter').");
            yesClicked = true; // Asumimos que Enter funcionar√° si el di√°logo es modal
        }

    } catch (error) {
        // Error durante la evaluaci√≥n o el press Enter
        console.warn(`‚ö†Ô∏è Error inesperado al intentar confirmar di√°logo: ${error.message}. Intentando 'Enter' como fallback final...`);
        try {
            await page.keyboard.press('Enter');
            console.log("üëç 'Yes' pulsado (M√©todo: Presionar 'Enter' - Fallback de error).");
            yesClicked = true;
        } catch (enterError) {
            console.error("‚ùå Fall√≥ incluso al presionar 'Enter' tras error inicial.", enterError.message);
            // Considera si lanzar el error o continuar asumiendo que pudo funcionar
            // throw error; // Descomenta si fallar aqu√≠ debe detener todo
        }
    }

    // Esperar cierre del di√°logo (opcional pero bueno para la estabilidad)
    if (yesClicked) {
      console.log("‚åõ Esperando posible cierre del di√°logo...");
      try {
        // Esperamos un tiempo razonable a que desaparezca el atributo 'open'
        await page.waitForFunction(() => !document.querySelector('mwc-dialog.yes-no-dialog[open]'), { timeout: 5000 });
        console.log("‚úÖ Di√°logo cerrado.");
      } catch (closeError) {
        console.warn("‚ö†Ô∏è El di√°logo no se cerr√≥ visualmente tras la acci√≥n, pero continuamos...");
      }
    } else {
        // Si no se pudo hacer clic ni presionar Enter, es un problema
         console.error("‚ùå No se pudo confirmar el di√°logo 'Yes/No' por ning√∫n m√©todo.");
         throw new Error("Fallo al confirmar el reinicio del runtime.");
    }   

  } catch (e) {
    console.error("‚ùå Error detallado al reiniciar el entorno:", e);
    console.log("üì∏ Se ha guardado una captura de pantalla del error.");
    throw e;
  }

  // --- PASO 3: Ejecutar las 3 celdas en secuencia ---
  console.log("‚ñ∂Ô∏è Ejecutando el flujo principal de 3 celdas...");
  let result = null;
  let stopButtonHandle = null;

  for (let i = 0; i < 3; i++) {
    const allCells = await page.$$(".cell.code");
    if (allCells.length < 3) throw new Error(`Error: Se esperaban ${3} celdas, pero se encontraron ${allCells.length}.`);

    const cell = allCells[i];
    await cell.evaluate((el) => el.scrollIntoView({ behavior: "smooth", block: "center" }));
    const editor = await cell.waitForSelector(".monaco-editor", { timeout: 10000 });

    if (i === 2) { // Limpiar salida solo en la √∫ltima celda
      console.log("üßπ Limpiando salida anterior de la celda 3...");
      await cell.evaluate((el) => {
        const outputNode = el.querySelector('.cell-output, .output_subarea, colab-static-output-renderer');
        if (outputNode) outputNode.innerHTML = '';
      });
      await sleep(200);
    }

    await editor.click();
    await page.keyboard.down(mod);
    await page.keyboard.press("Enter");
    await page.keyboard.up(mod);
    console.log(`‚ñ∂Ô∏è Celda ${i + 1} ejecutada.`);

    await sleep(5000); // Espera despu√©s de ejecutar cada celda

    if (i === 2) { // Esperar resultado solo en la √∫ltima celda
      try {
        console.log("üëÇ Esperando el enlace de Cloudflare...");
        const linkSelector = "colab-static-output-renderer a[href*='trycloudflare.com']";
        const linkHandle = await cell.waitForSelector(linkSelector, { timeout: 300000 });
        result = await page.evaluate(a => a.href, linkHandle);
        console.log(`‚úÖ URL capturada: ${result}`);
        stopButtonHandle = await cell.$('.colab-run-button[title*="Detener"], .colab-run-button[title*="Stop"]');
        if (stopButtonHandle) console.log("‚úÖ Bot√≥n de detenci√≥n encontrado.");
      } catch (e) {
        console.error("‚ùå Error al leer la salida de la celda 3:", e.message);
        result = null;
      }
    }
  }

  return { result, stopButtonHandle, page, browser };
}

// --- Bloque de Ejecuci√≥n Principal ---
if (require.main === module) {
  enableGpuAndRun()
    .then(async ({ result, browser }) => {
      console.log("\nüìä RESULTADO FINAL (URL):\n", result);
      // await browser.close(); // Descomenta si quieres cerrar al final
      // console.log("üö™ Navegador cerrado.");
    })
    .catch((err) => {
      console.error("üî• Error en el flujo principal:", err.message);
      if (err.stack) {
          console.error(err.stack);
      }
      process.exit(1);
    });
}

module.exports = { enableGpuAndRun };